// Generated by Dagger (https://dagger.dev).
package com.kvad.totalizator.accaunt.transaction.domain;

import com.kvad.totalizator.accaunt.data.MapperTransactionToTransactionRequest;
import com.kvad.totalizator.accaunt.transaction.withdraw.WithdrawRepository;
import com.kvad.totalizator.accaunt.data.UserRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WithdrawUseCase_Factory implements Factory<WithdrawUseCase> {
  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<WithdrawRepository> withdrawRepositoryProvider;

  private final Provider<MapperTransactionToTransactionRequest> mapperTransactionToTransactionRequestProvider;

  public WithdrawUseCase_Factory(Provider<UserRepository> userRepositoryProvider,
      Provider<WithdrawRepository> withdrawRepositoryProvider,
      Provider<MapperTransactionToTransactionRequest> mapperTransactionToTransactionRequestProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
    this.withdrawRepositoryProvider = withdrawRepositoryProvider;
    this.mapperTransactionToTransactionRequestProvider = mapperTransactionToTransactionRequestProvider;
  }

  @Override
  public WithdrawUseCase get() {
    return newInstance(userRepositoryProvider.get(), withdrawRepositoryProvider.get(), mapperTransactionToTransactionRequestProvider.get());
  }

  public static WithdrawUseCase_Factory create(Provider<UserRepository> userRepositoryProvider,
      Provider<WithdrawRepository> withdrawRepositoryProvider,
      Provider<MapperTransactionToTransactionRequest> mapperTransactionToTransactionRequestProvider) {
    return new WithdrawUseCase_Factory(userRepositoryProvider, withdrawRepositoryProvider, mapperTransactionToTransactionRequestProvider);
  }

  public static WithdrawUseCase newInstance(UserRepository userRepository,
      WithdrawRepository withdrawRepository,
      MapperTransactionToTransactionRequest mapperTransactionToTransactionRequest) {
    return new WithdrawUseCase(userRepository, withdrawRepository, mapperTransactionToTransactionRequest);
  }
}
