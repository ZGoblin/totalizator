// Generated by Dagger (https://dagger.dev).
package com.kvad.totalizator.event.data;

import com.kvad.totalizator.accaunt.data.UserRepository;
import com.kvad.totalizator.accaunt.data.UserService;
import com.kvad.totalizator.shared.SharedPref;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserRepository_Factory implements Factory<UserRepository> {
  private final Provider<UserService> userServiceProvider;

  private final Provider<SharedPref> sharedPrefProvider;

  public UserRepository_Factory(Provider<UserService> userServiceProvider,
      Provider<SharedPref> sharedPrefProvider) {
    this.userServiceProvider = userServiceProvider;
    this.sharedPrefProvider = sharedPrefProvider;
  }

  @Override
  public UserRepository get() {
    return newInstance(userServiceProvider.get(), sharedPrefProvider.get());
  }

  public static UserRepository_Factory create(Provider<UserService> userServiceProvider,
      Provider<SharedPref> sharedPrefProvider) {
    return new UserRepository_Factory(userServiceProvider, sharedPrefProvider);
  }

  public static UserRepository newInstance(UserService userService, SharedPref sharedPref) {
    return new UserRepository(userService, sharedPref);
  }
}
